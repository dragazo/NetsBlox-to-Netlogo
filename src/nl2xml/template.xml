<room name="{project_name}" app="NetsBlox 1.27.2, http://netsblox.org">
    <role name="myRole">
        <media name="myRole" app="NetsBlox 1.27.2, http://netsblox.org" version="1.27.2"></media>
        <project name="myRole" app="NetsBlox 1.27.2, http://netsblox.org" version="1.27.2">
            <stage name="Stage" width="{stage_size}" height="{stage_size}" costume="0" color="0,0,0,1" tempo="60" threadsafe="false" penlog="false" volume="100" pan="0" lines="round" ternary="false" hyperops="true" codify="false" inheritance="false" sublistIDs="false" scheduled="false" id="1">
                <variables>

                </variables>
                <blocks>
<block-definition s="setup patches" type="command" category="control"><inputs></inputs><script><block s="doWarp"><script><block s="doBroadcastAndWait"><l>delete patches</l></block><block s="doDeclareVariables"><list><l>w</l><l>scale</l><l>temp</l></list></block><block s="doSetVar"><l>w</l><l>{patches_radius}</l></block><block s="doSetVar"><l>scale</l><l>{patches_scale}</l></block><block s="doSetVar"><l>patches</l><block s="reportNewList"><list></list></block></block><block s="doFor"><l>r</l><block s="reportMonadic"><l><option>neg</option></l><block var="w"/></block><block var="w"/><script><block s="doFor"><l>c</l><block s="reportMonadic"><l><option>neg</option></l><block var="w"/></block><block var="w"/><script><block s="doSetVar"><l>temp</l><block s="newClone"><l>patches</l></block></block><block s="doTellTo"><block var="temp"/><block s="reifyScript"><script><block s="gotoXY"><block s="reportProduct"><block var="c"/><block var="scale"/></block><block s="reportProduct"><block var="r"/><block var="scale"/></block></block><block s="setColor"><color>0,0,0,1</color></block></script><list></list></block><list></list></block><block s="doAddToList"><block var="temp"/><block var="patches"/></block></script></block></script></block></script></block></script></block-definition>
<block-definition s="update background" type="command" category="looks"><inputs></inputs><script><block s="doWarp"><script><block s="doDeclareVariables"><list><l>temp</l></list></block><block s="doSetVar"><l>temp</l><block s="evaluate"><block s="reportJSFunction"><list><l>patches</l></list><l>const w = {patches_dim};&#xD;const scale = {patches_scale};&#xD;const raw = new Array(w * w * scale * scale);&#xD;const row = new Array(w * scale);&#xD;let rawp = 0;&#xD;for (let r = w - 1; r &gt;= 0; --r) {{&#xD;    let rowp = 0;&#xD;    for (let c = 0; c &lt; w; ++c) {{&#xD;        const color = patches.contents[r * w + c].color;&#xD;        const co = new List([color.r, color.g, color.b, 255]);&#xD;        for (let i = 0; i &lt; scale; ++i) row[rowp++] = co;&#xD;    }}&#xD;    for (let i = 0; i &lt; scale; ++i) {{&#xD;        for (let j = 0; j &lt; row.length; ++j) raw[rawp++] = row[j];&#xD;    }}&#xD;}}&#xD;return new List([new List(raw), w * scale]);</l></block><list><block var="patches"/></list></block></block><block s="doSwitchToCostume"><block s="reportNewCostume"><block s="reportListItem"><l>1</l><block var="temp"/></block><block s="reportListItem"><l>2</l><block var="temp"/></block><block s="reportListItem"><l>2</l><block var="temp"/></block></block></block></script></block></script></block-definition>
                </blocks>
                <scripts>
<script x="20" y="20"><block s="receiveGo"></block><custom-block s="setup patches" scope="local"></custom-block><custom-block s="setup"></custom-block><block s="doForever"><script><custom-block s="go"></custom-block><custom-block s="update background" scope="local"></custom-block></script></block></script>
                </scripts>
                <sprites>
{breed_sprites}
<sprite name="patches" x="0" y="0" heading="0" hidden="true" color="0,0,0,1" pen="middle">
    <blocks>

    </blocks>
    <variables>
{patches_props}
    </variables>
    <scripts>
        <script x="20" y="20"><block s="receiveMessage"><l>delete patches</l></block><block s="removeClone"></block></script>
    </scripts>
</sprite>
                </sprites>
            </stage>
            <hidden>

            </hidden>
            <variables>
<variable name="ticks"><l>0</l></variable>
<variable name="turtles"><list struct="atomic"></list></variable>
<variable name="patches"><list struct="atomic"></list></variable>
{variables}
            </variables>
            <blocks>
<block-definition s="script variable %&apos;a&apos; = %&apos;value&apos;" type="command" category="other"><inputs><input type="%upvar"></input><input type="%s"></input></inputs><script><block s="doSetVar"><l>a</l><block var="value"/></block></script></block-definition>

<block-definition s="%&apos;a&apos; xor %&apos;b&apos;" type="predicate" category="operators"><inputs><input type="%b"></input><input type="%b"></input></inputs><script><block s="doReport"><block s="reportEquals"><block s="reportNot"><block s="reportNot"><block var="a"/></block></block><block s="reportNot"><block var="b"/></block></block></block></script></block-definition>
<block-definition s="pick random float %&apos;max&apos;" type="reporter" category="operators"><inputs><input type="%n"></input></inputs><script><block s="doDeclareVariables"><list><l>a</l></list></block><block s="doSetVar"><l>a</l><l>10000000000</l></block><block s="doReport"><block s="reportProduct"><block var="max"/><block s="reportQuotient"><custom-block s="pick random 0 up to %n"><block var="a"/></custom-block><block var="a"/></block></block></block></script></block-definition>
<block-definition s="pick random 0 up to %&apos;val&apos;" type="reporter" category="operators"><inputs><input type="%n"></input></inputs><script><block s="doReport"><block s="reportIfElse"><block s="reportLessThan"><block var="val"/><l>0</l></block><block s="reportMonadic"><l><option>neg</option></l><custom-block s="pick random 0 up to %n"><block s="reportMonadic"><l><option>neg</option></l><block var="val"/></block></custom-block></block><block s="reportRandom"><l>0</l><block s="reportDifference"><block var="val"/><l>1</l></block></block></block></block></script></block-definition>
<block-definition s="is %&apos;sprite&apos; alive?" type="predicate" category="operators"><inputs><input type="%obj"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>sprite</l></list><l>return !sprite.isCorpse;</l></block><list><block var="sprite"/></list></block></block></script></block-definition>

<block-definition s="color %&apos;name&apos;" type="reporter" category="looks"><inputs><input type="%s" readonly="true"><options>gray&#xD;red&#xD;orange&#xD;brown&#xD;yellow&#xD;green&#xD;lime&#xD;turquoise&#xD;cyan&#xD;sky&#xD;blue&#xD;violet&#xD;magenta&#xD;pink</options></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>name</l></list><l>switch (name) {{&#xD;case &apos;gray&apos;: return new List([141, 141, 141]);&#xD;case &apos;red&apos;: return new List([215, 50, 41]);&#xD;case &apos;orange&apos;: return new List([241, 106, 21]);&#xD;case &apos;brown&apos;: return new List([157, 110, 72]);&#xD;case &apos;yellow&apos;: return new List([237, 237, 49]);&#xD;case &apos;green&apos;: return new List([89, 176, 60]);&#xD;case &apos;lime&apos;: return new List([44, 209, 59]);&#xD;case &apos;turquoise&apos;: return new List([29, 159, 120]);&#xD;case &apos;cyan&apos;: return new List([84, 196, 196]);&#xD;case &apos;sky&apos;: return new List([45, 141, 190]);&#xD;case &apos;blue&apos;: return new List([52, 93, 169]);&#xD;case &apos;violet&apos;: return new List([124, 80, 164]);&#xD;case &apos;magenta&apos;: return new List([167, 27, 106]);&#xD;case &apos;pink&apos;: return new List([224, 127, 150]);&#xD;}}</l></block><list><block var="name"/></list></block></block></script></block-definition>

<block-definition s="%&apos;count&apos; clones of %&apos;breed-name&apos;" type="reporter" category="control"><inputs><input type="%n"></input><input type="%s" readonly="true"><options>{plural_breed_names}</options></input></inputs><script><block s="doWarp"><script><block s="doIf"><block s="reportLessThan"><block var="count"/><l>1</l></block><script><block s="doReport"><block s="reportNewList"><list></list></block></block></script></block><block s="doDeclareVariables"><list><l>breed</l><l>sprite</l><l>res</l><l>temp</l></list></block><block s="doSetVar"><l>breed</l><block s="evaluate"><block s="reportJSFunction"><list><l>stage</l><l>name</l></list><l>return stage.variables.parentFrame.vars[name].value;</l></block><list><block s="reportObject"><l>Stage</l></block><block var="breed-name"/></list></block></block><block s="doSetVar"><l>sprite</l><block s="evaluate"><block s="reportJSFunction"><list><l>stage</l><l>name</l></list><l>for (const v of stage.parent.sprites.contents) if (v.name == name) return v;</l></block><list><block s="reportObject"><l>Stage</l></block><block var="breed-name"/></list></block></block><block s="doSetVar"><l>res</l><block s="reportNewList"><list></list></block></block><block s="doFor"><l>i</l><l>1</l><block var="count"/><script><block s="doSetVar"><l>temp</l><block s="newClone"><block var="sprite"/></block></block><block s="doAddToList"><block var="temp"/><block var="turtles"/></block><block s="doAddToList"><block var="temp"/><block var="breed"/></block><block s="doAddToList"><block var="temp"/><block var="res"/></block></script></block><block s="doReport"><block var="res"/></block></script></block></script></block-definition>
<block-definition s="%&apos;count&apos; new %&apos;breed-name&apos;" type="reporter" category="control"><inputs><input type="%n"></input><input type="%s" readonly="true"><options>{plural_breed_names}</options></input></inputs><script><block s="doDeclareVariables"><list><l>res</l></list></block><block s="doSetVar"><l>res</l><custom-block s="%n clones of %s"><block var="count"/><block var="breed-name"/></custom-block></block><custom-block s="tell %l to %cmdRing"><block var="res"/><block s="reifyScript"><script><block s="gotoXY"><l>0</l><l>0</l></block><block s="setHeading"><l><option>random</option></l></block><block s="show"></block></script><list></list></block></custom-block><block s="doReport"><block var="res"/></block></script></block-definition>
<block-definition s="%&apos;count&apos; new %&apos;breed-name&apos; (ordered)" type="reporter" category="control"><inputs><input type="%n"></input><input type="%s" readonly="true"><options>{plural_breed_names}</options></input></inputs><script><block s="doDeclareVariables"><list><l>res</l><l>ang</l><l>dtheta</l></list></block><block s="doSetVar"><l>res</l><custom-block s="%n clones of %s"><block var="count"/><block var="breed-name"/></custom-block></block><block s="doWarp"><script><block s="doSetVar"><l>ang</l><l>0</l></block><block s="doSetVar"><l>dtheta</l><block s="reportQuotient"><l>360</l><block var="count"/></block></block><block s="doForEach"><l>sprite</l><block var="res"/><script><block s="doTellTo"><block var="sprite"/><block s="reifyScript"><script><block s="gotoXY"><l>0</l><l>0</l></block><block s="setHeading"><block var="ang"/></block><block s="show"></block></script><list></list></block><list></list></block><block s="doChangeVar"><l>ang</l><block var="dtheta"/></block></script></block><block s="doReport"><block var="res"/></block></script></block></script></block-definition>
<block-definition s="delete all clones" type="command" category="control"><inputs></inputs><script><block s="doBroadcastAndWait"><l>delete</l></block><block s="doWarp"><script><block s="doDeclareVariables"><list><l>breed-names</l></list></block><block s="doSetVar"><l>breed-names</l><block s="reportTextSplit"><block s="evaluate"><block s="reportJSFunction"><list><l>stage</l></list><l>return stage.parent.sprites.contents.map(s =&gt; s.name).toString();</l></block><list><block s="reportObject"><l>Stage</l></block></list></block><l>,</l></block></block><block s="doAddToList"><l>turtles</l><block var="breed-names"/></block><block s="doForEach"><l>breed-name</l><block var="breed-names"/><script><block s="doIf"><block s="reportNot"><block s="reportEquals"><block var="breed-name"/><l>patches</l></block></block><script><block s="doRun"><block s="reportJSFunction"><list><l>stage</l><l>name</l></list><l>stage.variables.parentFrame.vars[name].value = new List();</l></block><list><block s="reportObject"><l>Stage</l></block><block var="breed-name"/></list></block></script></block></script></block></script></block></script></block-definition>

<block-definition s="tell %&apos;sprites&apos; to %&apos;action&apos;" type="command" category="control"><inputs><input type="%l"></input><input type="%cmdRing"></input></inputs><script><block s="doWarp"><script><block s="doForEach"><l>sprite</l><block s="reportIfElse"><block s="reportIsA"><block var="sprites"/><l><option>list</option></l></block><block var="sprites"/><block s="reportNewList"><list><block var="sprites"/></list></block></block><script><block s="doIf"><custom-block s="is %obj alive?"><block var="sprite"/></custom-block><script><block s="doTellTo"><block var="sprite"/><block var="action"/><list></list></block></script></block></script></block></script></block></script></block-definition>

<block-definition s="current patch" type="reporter" category="sensing"><inputs></inputs><script><block s="doReport"><block s="reportListItem"><block s="evaluate"><block s="reportJSFunction"><list><l>x</l><l>y</l></list><l>let j = Math.floor((x + {stage_size} / 2) / {patches_scale});&#xD;let i = Math.floor((y + {stage_size} / 2) / {patches_scale});&#xD;j = j &lt; 0 ? 0 : j &lt; {patches_dim} ? j : {patches_dim} - 1;&#xD;i = i &lt; 0 ? 0 : i &lt; {patches_dim} ? i : {patches_dim} - 1;&#xD;return i * {patches_dim} + j + 1</l></block><list><block s="xPosition"></block><block s="yPosition"></block></list></block><block var="patches"/></block></block></script></block-definition>

<block-definition s="set patch %&apos;name&apos; to %&apos;value&apos;" type="command" category="variables"><inputs><input type="%s" readonly="true"><options>{patch_props}</options></input><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>patch</l><l>name</l><l>value</l></list><l>if (name === &apos;color&apos;) {{&#xD;    const [r, g, b] = value.contents;&#xD;    const c = patch.color;&#xD;    c.r = r; c.g = g; c.b = b; &#xD;}}&#xD;else patch.variables.vars[name].value = value;</l></block><list><custom-block s="current patch"></custom-block><block var="name"/><block var="value"/></list></block></script></block-definition>
<block-definition s="change patch %&apos;name&apos; by %&apos;value&apos;" type="command" category="variables"><inputs><input type="%s" readonly="true"><options>{patch_props}</options></input><input type="%s"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>patch</l><l>name</l><l>value</l></list><l>const v = patch.variables.vars[name]; v.value = +v.value + +value;</l></block><list><custom-block s="current patch"></custom-block><block var="name"/><block var="value"/></list></block></script></block-definition>
<block-definition s="get patch %&apos;name&apos;" type="reporter" category="variables"><inputs><input type="%s" readonly="true"><options>{patch_props}</options></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>patch</l><l>name</l></list><l>if (name === &apos;color&apos;) {{&#xD;    const c = patch.color;&#xD;    return new List([c.r, c.g, c.b]);&#xD;}} else return patch.variables.vars[name].value;</l></block><list><custom-block s="current patch"></custom-block><block var="name"/></list></block></block></script></block-definition>

<block-definition s="move %&apos;count&apos; steps" type="command" category="motion"><inputs><input type="%n"></input></inputs><script><block s="forward"><block s="reportProduct"><block var="count"/><l>2.5</l></block></block><block s="gotoXY"><block s="reportDifference"><block s="reportModulus"><block s="reportSum"><block s="xPosition"></block><block s="reportQuotient"><block s="reportStageWidth"></block><l>2</l></block></block><block s="reportStageWidth"></block></block><block s="reportQuotient"><block s="reportStageWidth"></block><l>2</l></block></block><block s="reportDifference"><block s="reportModulus"><block s="reportSum"><block s="yPosition"></block><block s="reportQuotient"><block s="reportStageHeight"></block><l>2</l></block></block><block s="reportStageHeight"></block></block><block s="reportQuotient"><block s="reportStageHeight"></block><l>2</l></block></block></block></script></block-definition>
<block-definition s="random x position" type="reporter" category="motion"><inputs></inputs><script><block s="doReport"><block s="reportDifference"><custom-block s="pick random float %n"><block s="reportStageWidth"></block></custom-block><block s="reportQuotient"><block s="reportStageWidth"></block><l>2</l></block></block></block></script></block-definition>
<block-definition s="random y position" type="reporter" category="motion"><inputs></inputs><script><block s="doReport"><block s="reportDifference"><custom-block s="pick random float %n"><block s="reportStageHeight"></block></custom-block><block s="reportQuotient"><block s="reportStageHeight"></block><l>2</l></block></block></block></script></block-definition>

{custom_blocks}
            </blocks>
        </project>
    </role>
</room>